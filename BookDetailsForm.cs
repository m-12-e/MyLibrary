using System;
using System.Configuration;
using System.Data.SqlClient; // Use MySql.Data.MySqlClient for MySQL
using System.Windows.Forms;


namespace Library// Ensure this namespace matches your project's default namespace
{
    public partial class BookDetailsForm : Form
    {
        private string connectionString;
        private int? bookIdToEdit; // Null for add mode, has value for edit mode

        /// <summary>
        /// Constructor for BookDetailsForm.
        /// </summary>
        /// <param name="bookId">Optional. If provided, the form opens in edit mode for this book ID.</param>
        public BookDetailsForm(int? bookId = null)
        {
            InitializeComponent(); // Auto-generated by the designer
            connectionString = ConfigurationManager.ConnectionStrings["LibraryDBConnection"].ConnectionString;
            bookIdToEdit = bookId; // Set the book ID if in edit mode

            // Adjust form title based on mode (Add or Edit)
            if (bookIdToEdit.HasValue)
            {
                this.Text = "Edit Book Details";
                LoadBookDetails(bookIdToEdit.Value); // Load existing book data for editing
            }
            else
            {
                this.Text = "Add New Book";
            }
        }

        /// <summary>
        /// Loads existing book details from the database into the form controls for editing.
        /// </summary>
        /// <param name="bookId">The ID of the book to load.</param>
        private void LoadBookDetails(int bookId)
        {
            string query = "SELECT Title, Author, Year, AvailableCopies FROM Books WHERE BookID = @BookID";
            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@BookID", bookId);
                        connection.Open();
                        using (SqlDataReader reader = command.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                // Populate form controls with data from the database
                                txtTitle.Text = reader["Title"].ToString();
                                txtAuthor.Text = reader["Author"].ToString();
                                numYear.Value = Convert.ToInt32(reader["Year"]); // Assuming numYear is NumericUpDown
                                numAvailableCopies.Value = Convert.ToInt32(reader["AvailableCopies"]); // Assuming numAvailableCopies is NumericUpDown
                            }
                            else
                            {
                                MessageBox.Show("Book not found.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                this.Close(); // Close the form if book not found
                            }
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show("Error loading book details: " + ex.Message, "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (Exception ex)
            {
                MessageBox.Show("An unexpected error occurred while loading book details: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        /// <summary>
        /// Handles the click event for the "Save" button.
        /// Validates input and performs an INSERT or UPDATE operation on the Books table.
        /// </summary>
        private void btnSave_Click(object sender, EventArgs e)
        {
            // --- Input Validation ---
            if (string.IsNullOrWhiteSpace(txtTitle.Text))
            {
                MessageBox.Show("Book Title cannot be empty.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                txtTitle.Focus();
                return;
            }
            if (string.IsNullOrWhiteSpace(txtAuthor.Text))
            {
                MessageBox.Show("Author cannot be empty.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                txtAuthor.Focus();
                return;
            }

            // Validate Year (e.g., between 1000 and current year + 10)
            if (numYear.Value < 1000 || numYear.Value > DateTime.Now.Year + 10)
            {
                MessageBox.Show($"Please enter a valid year between 1000 and {DateTime.Now.Year + 10}.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                numYear.Focus();
                return;
            }

            // Validate Available Copies (cannot be negative)
            if (numAvailableCopies.Value < 0)
            {
                MessageBox.Show("Available copies cannot be negative.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                numAvailableCopies.Focus();
                return;
            }

            // Get validated input values
            string title = txtTitle.Text.Trim();
            string author = txtAuthor.Text.Trim();
            int year = (int)numYear.Value;
            int availableCopies = (int)numAvailableCopies.Value;

            string query;
            // Determine if it's an UPDATE or INSERT operation
            if (bookIdToEdit.HasValue)
            {
                // UPDATE query for existing book
                query = "UPDATE Books SET Title = @Title, Author = @Author, Year = @Year, AvailableCopies = @AvailableCopies WHERE BookID = @BookID";
            }
            else
            {
                // INSERT query for new book
                query = "INSERT INTO Books (Title, Author, Year, AvailableCopies) VALUES (@Title, @Author, @Year, @AvailableCopies)";
            }

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        // Add parameters to prevent SQL injection
                        command.Parameters.AddWithValue("@Title", title);
                        command.Parameters.AddWithValue("@Author", author);
                        command.Parameters.AddWithValue("@Year", year);
                        command.Parameters.AddWithValue("@AvailableCopies", availableCopies);

                        // If in edit mode, add the BookID parameter
                        if (bookIdToEdit.HasValue)
                        {
                            command.Parameters.AddWithValue("@BookID", bookIdToEdit.Value);
                        }

                        connection.Open();
                        command.ExecuteNonQuery(); // Execute the query

                        MessageBox.Show("Book saved successfully!", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        this.DialogResult = DialogResult.OK; // Set DialogResult to OK to indicate success to the calling form
                        this.Close(); // Close the form
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show("Error saving book: " + ex.Message, "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (Exception ex)
            {
                MessageBox.Show("An unexpected error occurred while saving book: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        /// <summary>
        /// Handles the click event for the "Cancel" button.
        /// Closes the form without saving changes.
        /// </summary>
        private void btnCancel_Click(object sender, EventArgs e)
        {
            this.DialogResult = DialogResult.Cancel; // Set DialogResult to Cancel
            this.Close(); // Close the form
        }
    }
}
