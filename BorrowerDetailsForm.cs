using System;
using System.Configuration;
using System.Data.SqlClient; // Use MySql.Data.MySqlClient for MySQL
using System.Windows.Forms;
using System.Text.RegularExpressions;
// For email validation

namespace Library// Ensure this namespace matches your project's default namespace
{
    public partial class BorrowerDetailsForm : Form
    {
        private string connectionString;
        private int? borrowerIdToEdit; // Null for add mode, has value for edit mode

        /// <summary>
        /// Constructor for BorrowerDetailsForm.
        /// </summary>
        /// <param name="borrowerId">Optional. If provided, the form opens in edit mode for this borrower ID.</param>
        public BorrowerDetailsForm(int? borrowerId = null)
        {
            InitializeComponent(); // Auto-generated by the designer
            connectionString = ConfigurationManager.ConnectionStrings["LibraryDBConnection"].ConnectionString;
            borrowerIdToEdit = borrowerId; // Set the borrower ID if in edit mode

            // Adjust form title based on mode (Add or Edit)
            if (borrowerIdToEdit.HasValue)
            {
                this.Text = "Edit Borrower Details";
                LoadBorrowerDetails(borrowerIdToEdit.Value); // Load existing borrower data for editing
            }
            else
            {
                this.Text = "Add New Borrower";
            }
        }

        /// <summary>
        /// Loads existing borrower details from the database into the form controls for editing.
        /// </summary>
        /// <param name="borrowerId">The ID of the borrower to load.</param>
        private void LoadBorrowerDetails(int borrowerId)
        {
            string query = "SELECT Name, Email, Phone FROM Borrowers WHERE BorrowerID = @BorrowerID";
            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@BorrowerID", borrowerId);
                        connection.Open();
                        using (SqlDataReader reader = command.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                // Populate form controls with data from the database
                                txtName.Text = reader["Name"].ToString();
                                txtEmail.Text = reader["Email"].ToString();
                                txtPhone.Text = reader["Phone"].ToString();
                            }
                            else
                            {
                                MessageBox.Show("Borrower not found.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                this.Close(); // Close the form if borrower not found
                            }
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show("Error loading borrower details: " + ex.Message, "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (Exception ex)
            {
                MessageBox.Show("An unexpected error occurred while loading borrower details: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        /// <summary>
        /// Validates an email address using a regular expression.
        /// </summary>
        /// <param name="email">The email string to validate.</param>
        /// <returns>True if the email is valid, false otherwise.</returns>
        private bool IsValidEmail(string email)
        {
            if (string.IsNullOrWhiteSpace(email)) return true; // Email can be empty if not required

            // A common regex for email validation (can be more complex based on requirements)
            string emailPattern = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";
            return Regex.IsMatch(email, emailPattern);
        }

        /// <summary>
        /// Handles the click event for the "Save" button.
        /// Validates input and performs an INSERT or UPDATE operation on the Borrowers table.
        /// </summary>
        private void btnSave_Click(object sender, EventArgs e)
        {
            // --- Input Validation ---
            if (string.IsNullOrWhiteSpace(txtName.Text))
            {
                MessageBox.Show("Borrower Name cannot be empty.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                txtName.Focus();
                return;
            }

            if (!IsValidEmail(txtEmail.Text))
            {
                MessageBox.Show("Please enter a valid email address.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                txtEmail.Focus();
                return;
            }

            // Get validated input values
            string name = txtName.Text.Trim();
            string email = txtEmail.Text.Trim();
            string phone = txtPhone.Text.Trim();

            string query;
            // Determine if it's an UPDATE or INSERT operation
            if (borrowerIdToEdit.HasValue)
            {
                // UPDATE query for existing borrower
                query = "UPDATE Borrowers SET Name = @Name, Email = @Email, Phone = @Phone WHERE BorrowerID = @BorrowerID";
            }
            else
            {
                // INSERT query for new borrower
                query = "INSERT INTO Borrowers (Name, Email, Phone) VALUES (@Name, @Email, @Phone)";
            }

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        // Add parameters to prevent SQL injection
                        command.Parameters.AddWithValue("@Name", name);
                        command.Parameters.AddWithValue("@Email", string.IsNullOrEmpty(email) ? (object)DBNull.Value : email); // Handle nullable email
                        command.Parameters.AddWithValue("@Phone", string.IsNullOrEmpty(phone) ? (object)DBNull.Value : phone); // Handle nullable phone

                        // If in edit mode, add the BorrowerID parameter
                        if (borrowerIdToEdit.HasValue)
                        {
                            command.Parameters.AddWithValue("@BorrowerID", borrowerIdToEdit.Value);
                        }

                        connection.Open();
                        command.ExecuteNonQuery(); // Execute the query

                        MessageBox.Show("Borrower saved successfully!", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        this.DialogResult = DialogResult.OK; // Set DialogResult to OK to indicate success to the calling form
                        this.Close(); // Close the form
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show("Error saving borrower: " + ex.Message, "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (Exception ex)
            {
                MessageBox.Show("An unexpected error occurred while saving borrower: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        /// <summary>
        /// Handles the click event for the "Cancel" button.
        /// Closes the form without saving changes.
        /// </summary>
        private void btnCancel_Click(object sender, EventArgs e)
        {
            this.DialogResult = DialogResult.Cancel; // Set DialogResult to Cancel
            this.Close(); // Close the form
        }
    }
}
