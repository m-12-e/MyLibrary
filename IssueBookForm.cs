using System;
using System.Configuration;
using System.Data;
using System.Data.SqlClient; 
using System.Windows.Forms;


namespace Librarye
{
    public partial class IssueBookForm : Form
    {
        private string connectionString;
        private int selectedBorrowerId; // The ID of the borrower to whom the book will be issued

        /// <summary>
        /// Constructor for IssueBookForm.
        /// </summary>
        /// <param name="borrowerId">The ID of the borrower selected from the main form.</param>
        /// <param name="borrowerName">The name of the borrower to display on the form.</param>
        public IssueBookForm(int borrowerId, string borrowerName)
        {
            InitializeComponent(); // Auto-generated by the designer
            connectionString = ConfigurationManager.ConnectionStrings["LibraryDBConnection"].ConnectionString;
            selectedBorrowerId = borrowerId;

            // Display the borrower's name on the form
            lblBorrowerNameDisplay.Text = $"Issuing to: {borrowerName}";

            LoadAvailableBooks(); // Populate the ComboBox with available books
            dtpIssueDate.Value = DateTime.Today; // Default issue date to today
            dtpDueDate.Value = DateTime.Today.AddDays(14); // Default due date to 14 days from today
        }

        /// <summary>
        /// Loads books that have available copies into the cmbBooks ComboBox.
        /// </summary>
        private void LoadAvailableBooks()
        {
            string query = "SELECT BookID, Title, Author FROM Books WHERE AvailableCopies > 0 ORDER BY Title ASC";
            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    SqlDataAdapter adapter = new SqlDataAdapter(query, connection);
                    DataTable dtBooks = new DataTable();
                    connection.Open();
                    adapter.Fill(dtBooks);

                    // Bind the DataTable to the ComboBox
                    cmbBooks.DataSource = dtBooks;
                    cmbBooks.DisplayMember = "Title"; // What the user sees in the dropdown
                    cmbBooks.ValueMember = "BookID";   // The actual value (BookID) associated with the selected item
                    cmbBooks.SelectedIndex = -1; // No item selected by default
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show("Error loading available books: " + ex.Message, "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            catch (Exception ex)
            {
                MessageBox.Show("An unexpected error occurred while loading available books: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        /// <summary>
        /// Handles the click event for the "Issue Book" button.
        /// Decrements available copies of the book and records the issue in IssuedBooks table.
        /// </summary>
        private void btnIssue_Click(object sender, EventArgs e)
        {
            // --- Input Validation ---
            if (cmbBooks.SelectedValue == null)
            {
                MessageBox.Show("Please select a book to issue.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            int bookId = (int)cmbBooks.SelectedValue;
            DateTime issueDate = dtpIssueDate.Value.Date; // Get only the date part
            DateTime dueDate = dtpDueDate.Value.Date;     // Get only the date part

            if (dueDate <= issueDate)
            {
                MessageBox.Show("Due date must be after the issue date.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                SqlTransaction transaction = connection.BeginTransaction(); // Start a database transaction for atomicity
                try
                {
                    // 1. Decrement AvailableCopies in the Books table
                    // Add "AND AvailableCopies > 0" to prevent issuing if copies somehow became 0 after loading
                    string updateBookQuery = "UPDATE Books SET AvailableCopies = AvailableCopies - 1 WHERE BookID = @BookID AND AvailableCopies > 0";
                    using (SqlCommand updateBookCommand = new SqlCommand(updateBookQuery, connection, transaction))
                    {
                        updateBookCommand.Parameters.AddWithValue("@BookID", bookId);
                        int rowsAffected = updateBookCommand.ExecuteNonQuery();

                        if (rowsAffected == 0)
                        {
                            transaction.Rollback(); // Rollback if no copies were decremented (e.g., already 0)
                            MessageBox.Show("No copies available for this book or book not found.", "Issue Failed", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return;
                        }
                    }

                    // 2. Insert a new record into the IssuedBooks table
                    string insertIssueQuery = "INSERT INTO IssuedBooks (BookID, BorrowerID, IssueDate, DueDate) VALUES (@BookID, @BorrowerID, @IssueDate, @DueDate)";
                    using (SqlCommand insertIssueCommand = new SqlCommand(insertIssueQuery, connection, transaction))
                    {
                        insertIssueCommand.Parameters.AddWithValue("@BookID", bookId);
                        insertIssueCommand.Parameters.AddWithValue("@BorrowerID", selectedBorrowerId);
                        insertIssueCommand.Parameters.AddWithValue("@IssueDate", issueDate);
                        insertIssueCommand.Parameters.AddWithValue("@DueDate", dueDate);
                        insertIssueCommand.ExecuteNonQuery();
                    }

                    transaction.Commit(); // Commit the transaction if both operations succeed
                    MessageBox.Show("Book issued successfully!", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.DialogResult = DialogResult.OK; // Indicate success to the calling form (MainForm)
                    this.Close(); // Close the form
                }
                catch (SqlException ex)
                {
                    transaction.Rollback(); // Rollback on SQL error
                    MessageBox.Show("Database error issuing book: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                catch (Exception ex)
                {
                    transaction.Rollback(); // Rollback on general error
                    MessageBox.Show("An unexpected error occurred while issuing book: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        /// <summary>
        /// Handles the click event for the "Cancel" button.
        /// Closes the form without performing any issue operation.
        /// </summary>
        private void btnCancel_Click(object sender, EventArgs e)
        {
            this.DialogResult = DialogResult.Cancel; // Indicate cancellation
            this.Close(); // Close the form
        }
    }
}
